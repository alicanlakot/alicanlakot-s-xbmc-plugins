'''
    Furk.net player for XBMC
    Copyright (C) 2010 Gpun Yog 

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
'''

import sys, re, time,os
import xbmc, xbmcgui, xbmcplugin
import urllib
from resources.lib.utils.titles.series import SeriesParser
from resources.lib.utils.titles.movie import MovieParser
        

__settings__ = sys.modules[ "__main__" ].__settings__
##MOVIES_PATH= os.path.join('C:/Users/altasak/XBMC/movies','')
##TV_SHOWS_PATH = os.path.join('C:/Users/altasak/XBMC/shows','')
MOVIES_PATH = os.path.join(xbmc.translatePath('special://profile/addon_data/plugin.video.furklibrary/movies'), '')
TV_SHOWS_PATH = os.path.join(xbmc.translatePath('special://profile/addon_data/plugin.video.furklibrary/tvshows'), '')

def printRecentQueries():
        # search

        recent = __settings__.getSetting('recent_queries').split('|')
        if '' in recent:
                recent.remove('')
        total = len(recent) + 1

        name = '@Search...'
        url = sys.argv[0] + '?action=search&query='
        listitem = xbmcgui.ListItem()
        listitem.setLabel(name)
        xbmcplugin.addDirectoryItem(int(sys.argv[1]), url, listitem, isFolder=True, totalItems=total)

        for r in recent:
                url = sys.argv[0] + '?action=search&query=' + r

                r = urllib.unquote(r)
                listitem = xbmcgui.ListItem()
                listitem.setLabel(r)
                xbmcplugin.addDirectoryItem(int(sys.argv[1]), url, listitem, isFolder=True, totalItems=total)


        xbmcplugin.endOfDirectory(int(sys.argv[1]))
        

def printDirs(dirs):
        xbmcplugin.setContent(int(sys.argv[1]), 'videos')
        xbmcplugin.addSortMethod(int(sys.argv[1]), xbmcplugin.SORT_METHOD_LABEL)
        xbmcplugin.addSortMethod(int(sys.argv[1]), xbmcplugin.SORT_METHOD_DATE)
        
        total = len(dirs)

        # search
        total = total + 1
        name = '@Search'
        date = '1970-01-01'
        url = sys.argv[0] + '?action=recent_queries&query='
        listitem = xbmcgui.ListItem()
        listitem.setLabel(name)
        listitem.setLabel2(date)
        listitem.setThumbnailImage('http://www.furk.net/img/logo.png')
        listitem.setInfo('video', {'date': date, 'title': name})
        xbmcplugin.addDirectoryItem(int(sys.argv[1]), url, listitem, isFolder=True, totalItems=total)


        for d in dirs:
                id = d.getElementsByTagName('id').item(0).firstChild.data
                name = d.getElementsByTagName('name').item(0).firstChild.data
                date = d.getElementsByTagName('date').item(0).firstChild.data
                thumb = d.getElementsByTagName('thumb').item(0).firstChild.data

                url = sys.argv[0] + '?action=files&did=' + id
                
                listitem = xbmcgui.ListItem()
                listitem.setLabel(name)
                listitem.setLabel2(date)
                listitem.setThumbnailImage(thumb)
                listitem.setInfo('video', {'date': date, 'title': name})
                xbmcplugin.addDirectoryItem(int(sys.argv[1]), url, listitem, isFolder=True, totalItems=total)

        xbmcplugin.endOfDirectory(int(sys.argv[1]))

def printFiles(files):
        xbmcplugin.setContent(int(sys.argv[1]), 'videos')
        xbmcplugin.addSortMethod(int(sys.argv[1]), xbmcplugin.SORT_METHOD_LABEL)
        if not files:
                return
        total = len(files)
        for f in files:
                try:
                        id = f.getElementsByTagName('id').item(0).firstChild.data
                        name = f.getElementsByTagName('name').item(0).firstChild.data
                        play_url = f.getElementsByTagName('url').item(0).firstChild.data
                        url = sys.argv[0] + '?action=play&url=' + urllib.quote(play_url)
                        # Check here from the name if this is a series or not
                        p = re.compile("(.+)S(\d\d)E\d\d.*",re.I)
                        m = p.match(name)
                        #xbmcgui.Dialog().ok('ok')
                        if m:
                                show_name= m.group(1)
                                season = m.group(2)
                                show_path = os.path.join(TV_SHOWS_PATH, CleanFileName(show_name, False))
                                CreateDirectory(show_path)              
                                season_path = os.path.join(show_path, season)
                                CreateDirectory(season_path)
                                mydir= season_path
                        else:
                                mydir= MOVIES_PATH 
                        if 'sample' in name:
                                skip = true
                        else:
                                CreateStreamFile(name,url,mydir,False)
                        #Notification(name,name)
                        listitem = xbmcgui.ListItem()
                        listitem.setLabel(name)
                        listitem.setInfo('video', {'title': name})
                        xbmcplugin.addDirectoryItem(int(sys.argv[1]), url, listitem, isFolder=False, totalItems=total)
                        #xbmc.log('f=%s' % name)        
                except:
                        Notification("error","error")
        xbmcplugin.endOfDirectory(int(sys.argv[1]))

def addFiles(files):
        
        total = len(files)
        for f in files:
                
                id = f.getElementsByTagName('id').item(0).firstChild.data
                name = f.getElementsByTagName('name').item(0).firstChild.data
                play_url = f.getElementsByTagName('url').item(0).firstChild.data
                url = sys.argv[0] + '?action=play&url=' + urllib.quote(play_url)
                #Notification(name,name)

                # Check here from the name if this is a series or not
                myParser= guess_series(name)
                
                #xbmcgui.Dialog().ok('ok')
                if myParser:
                        myParser.parse()
                        show_name= myParser.name
                        episode= myParser.episode
                        season = str(myParser.season)
                        show_path = os.path.join(TV_SHOWS_PATH, CleanFileName(show_name, False))
                        CreateDirectory(show_path)              
                        season_path = os.path.join(show_path, season)
                        CreateDirectory(season_path)
                        show_full = show_name + ' S' + season + 'E' + str(episode) 
                        CreateStreamFile(show_full,play_url,season_path,False)

                else:
                        
                        parser = MovieParser()
                        parser.data = name
                        parser.parse()
                        myName = parser.name 
                        myYear = parser.year 
                        if myName :
                                if myYear :
                                        movie_name = myName + ' (' + str(myYear) + ')'
                                        mydir= MOVIES_PATH
                                        CreateStreamFile(movie_name,play_url,mydir,False)
                                else:
                                        pass
                                        
            
                        
                
                


def CreateStreamFile(name, href, dir, remove_year):
        try:
                CreateDirectory(dir)
                strm_string = href
                filename = CleanFileName(name, remove_year) + ".strm"
                path = os.path.join(dir, filename)
                file = open(path,'w')
                file.write(strm_string)
                file.close()
        except:
                print "Error while creating strm file for : " + name

def CleanFileName(s, remove_year):
        if remove_year:
                s = s[0:len(s)-7]
        s = s.replace(' (Eng subs)', '')
        s = s.replace(' (eng subs)', '')
        s = s.replace(' (English subs)', '')
        s = s.replace(' (english subs)', '')
        s = s.replace(' (Eng Subs)', '')
        s = s.replace(' (English Subs)', '')
        s = s.replace('&#x26;', '&')
        s = s.replace('&#x27;', '\'')
        s = s.replace('&#xC6;', 'AE')
        s = s.replace('&#xC7;', 'C')
        s = s.replace('&#xF4;', 'o')
        s = s.replace('&#xE9;', 'e')
        s = s.replace('&#xEB;', 'e')
        s = s.replace('&#xED;', 'i')
        s = s.replace('&#xEE;', 'i')
        s = s.replace('&frac12;', ' ')
        s = s.replace('&#xBD;', ' ') #half character
        s = s.replace('&#xB3;', ' ')
        s = s.replace('&#xB0;', ' ') #degree character
        s = s.replace('&#xA2;', 'c')
        s = s.replace('&#xE2;', 'a')
        s = s.replace('&#xEF;', 'i')
        s = s.replace('&#xE1;', 'a')
        s = s.replace('&#xE8;', 'e')
        s = s.replace('%2E', '.')
        s = s.replace('"', ' ')
        s = s.replace('*', ' ')
        s = s.replace('/', ' ')
        s = s.replace(':', ' ')
        s = s.replace('<', ' ')
        s = s.replace('>', ' ')
        s = s.replace('?', ' ')
        s = s.replace('\\', ' ')
        s = s.replace('|', ' ')
        s = s.replace('.', ' ')
        s = s.replace('!', ' ')
        s = s.strip()
        return s

def CreateDirectory(dir_path):
        dir_path = dir_path.strip()
        if not os.path.exists(dir_path):
                os.makedirs(dir_path)

def Notification(title, message):
        xbmc.executebuiltin("XBMC.Notification("+title+","+message+")")

def getSeasonNumber(filename):
        patterns =      [
                                '.*S(\d+)E(\d+).*',
                                '.*(\d+)x(\d+).*'
                        ]
        for pattern in patterns:
                p = re.compile(pattern, re.I)
                g = p.findall(filename)
                if len(g) > 0:
                        season = int(g[0][0])
                        return season

        return None


def guess_series(title):
        """Returns a valid series parser if this :title: appears to be a series"""

        parser = SeriesParser(identified_by='ep', allow_seasonless=False)
        # We need to replace certain characters with spaces to make sure episode parsing works right
        # We don't remove anything, as the match positions should line up with the original title
        clean_title = re.sub('[_.,\[\]\(\):]', ' ', title)
        match = parser.parse_episode(clean_title)
        if match:
            if parser.parse_unwanted(clean_title):
                return
            elif match['match'].start() > 1:
                # We start using the original title here, so we can properly ignore unwanted prefixes.
                # Look for unwanted prefixes to find out where the series title starts
                start = 0
                prefix = re.match('|'.join(parser.ignore_prefixes), title)
                if prefix:
                    start = prefix.end()
                # If an episode id is found, assume everything before it is series name
                name = title[start:match['match'].start()]
                # Remove possible episode title from series name (anything after a ' - ')
                name = name.split(' - ')[0]
                # Replace some special characters with spaces
                name = re.sub('[\._\(\) ]+', ' ', name).strip(' -')
                # Normalize capitalization to title case
                name = name.title()
                # If we didn't get a series name, return
                if not name:
                    return
                parser.name = name
                parser.data = title
                
                try:
                    parser.parse(data=title)
                except ParseWarning, pw:
                    log.debug('ParseWarning: %s' % pw.value)
                if parser.valid:
                    return parser

def playFile(play_url):
        try:
                #Notification("Streaming", "Streaming")
                listitem = xbmcgui.ListItem('Ironman')
                xbmc.Player().play(urllib.unquote(play_url), listitem)
        except:
                print 'file streaming failed'
                Notification("Streaming failed", "Streaming failed")
